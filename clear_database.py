#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö TeleBlast
–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!
"""

import asyncio
import sys
from pathlib import Path

from database import Database
from config import DATABASE_PATH


async def clear_all_data(db: Database):
    """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã. –í–ù–ò–ú–ê–ù–ò–ï: –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!"""
    print("üóëÔ∏è  –û—á–∏—â–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å —É—á—ë—Ç–æ–º FK)
    await db.conn.execute("DELETE FROM broadcast_messages")
    print("   ‚úÖ –û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ broadcast_messages")
    
    await db.conn.execute("DELETE FROM broadcasts")
    print("   ‚úÖ –û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ broadcasts")
    
    await db.conn.execute("DELETE FROM list_groups")
    print("   ‚úÖ –û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ list_groups")
    
    await db.conn.execute("DELETE FROM groups")
    print("   ‚úÖ –û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ groups")
    
    await db.conn.execute("DELETE FROM lists")
    print("   ‚úÖ –û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ lists")
    
    await db.conn.commit()
    print("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!")


async def get_database_stats(db: Database) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    stats = {}
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø
    cursor = await db.conn.execute("SELECT COUNT(*) FROM groups")
    stats['groups'] = (await cursor.fetchone())[0]
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    cursor = await db.conn.execute("SELECT COUNT(*) FROM lists")
    stats['segments'] = (await cursor.fetchone())[0]
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π
    cursor = await db.conn.execute("SELECT COUNT(*) FROM list_groups")
    stats['connections'] = (await cursor.fetchone())[0]
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—ã–ª–æ–∫
    cursor = await db.conn.execute("SELECT COUNT(*) FROM broadcasts")
    stats['broadcasts'] = (await cursor.fetchone())[0]
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞—Å—Å—ã–ª–æ–∫
    cursor = await db.conn.execute("SELECT COUNT(*) FROM broadcast_messages")
    stats['messages'] = (await cursor.fetchone())[0]
    
    return stats


def confirm_action() -> bool:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\n" + "="*60)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –≠–¢–û –£–î–ê–õ–ò–¢ –í–°–ï –î–ê–ù–ù–´–ï –ò–ó –ë–ê–ó–´!")
    print("="*60)
    print("–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:")
    print("‚Ä¢ –í—Å–µ –≥—Ä—É–ø–ø—ã")
    print("‚Ä¢ –í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã")
    print("‚Ä¢ –í—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
    print("‚Ä¢ –í—Å—è –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("‚Ä¢ –í—Å–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ –∏ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏")
    print("\nüö® –≠–¢–ê –û–ü–ï–†–ê–¶–ò–Ø –ù–ï–û–ë–†–ê–¢–ò–ú–ê!")
    print("="*60)
    
    while True:
        answer = input("\n–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        if answer in ['–¥–∞', 'yes', 'y']:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirm = input("–ù–∞–ø–∏—à–∏—Ç–µ '–£–î–ê–õ–ò–¢–¨' –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ").strip()
            if confirm == '–£–î–ê–õ–ò–¢–¨':
                return True
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return False
        elif answer in ['–Ω–µ—Ç', 'no', 'n']:
            return False
        else:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß TeleBlast - –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_path = Path(DATABASE_PATH)
    if not db_path.exists():
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DATABASE_PATH}")
        print("–í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –µ—â—ë –Ω–∏ —Ä–∞–∑—É –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è.")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    db = Database(DATABASE_PATH)
    await db.init()
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await get_database_stats(db)
        
        print(f"üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   üìÅ –ì—Ä—É–ø–ø: {stats['groups']}")
        print(f"   üè∑Ô∏è  –°–µ–≥–º–µ–Ω—Ç–æ–≤: {stats['segments']}")
        print(f"   üîó –°–≤—è–∑–µ–π: {stats['connections']}")
        print(f"   üì¨ –†–∞—Å—Å—ã–ª–æ–∫: {stats['broadcasts']}")
        print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['messages']}")
        
        # –ï—Å–ª–∏ –±–∞–∑–∞ —É–∂–µ –ø—É—Å—Ç–∞—è
        total_records = sum(stats.values())
        if total_records == 0:
            print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –ø—É—Å—Ç–∞—è!")
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not confirm_action():
            print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
        print("\nüöÄ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É...")
        await clear_all_data(db)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        new_stats = await get_database_stats(db)
        total_after = sum(new_stats.values())
        
        if total_after == 0:
            print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")
            print("–¢–µ–ø–µ—Ä—å —É –≤–∞—Å —á–∏—Å—Ç—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä TeleBlast.")
        else:
            print(f"\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤ –±–∞–∑–µ –æ—Å—Ç–∞–ª–∏—Å—å –∑–∞–ø–∏—Å–∏ ({total_after})")
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if hasattr(db, 'conn') and db.conn:
            await db.conn.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)